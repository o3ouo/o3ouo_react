Redux : 리액트와 함꼐 자주 사용하는 상태 관리 라이브러리
 : 애플리케이션의 상태(state)를 중앙에서 관리하고 업데이트하는 것을 쉽게 만들어 준다.
 : 상태를 한 곳에서 관리하고, 상태가 바뀌면 자동으로 필요한 컴포넌트들이 업데이트되도록 도와주는 도구

* 리덕스의 핵심 개념
1. 스토어(Store)
 : 애플리케이션의 상태가 저장되는 장소.
 : 스토어는 오직 하나만 존재하며, 상태를 읽거나 업데이트할 때 사용

2. 액션(Action)
 : 상태를 어떻게 변경할지 지시하는 '메시지'
 : 액션은 *type*이라는 필수 속성을 포함하며, 추가 데이터를 전달할 수도 있다.
ex. const action = { type : 'INCREMENT', payload : 1};

3. 리듀서(Reducer) 
 : 액션을 받아 현재 상태를 새로운 상태로 변경하는 순수 함수.
 : 상태를 직접 수정하지 않고, 새로운 상태를 반환해야 한다.
ex. const reducer = (state = 0. action) => {
	switch (action.type) {
		case 'INCREMENT' {
			return state + action.payload;
		case 'DECREMENT' :
			reurn state - action.payload;
		default : 
			return;
	}
};

4. 디스패치(Dispatch)
 : 스토어에 액션을 보내는 함수.
 : 디스패치가 호출되면 리듀서가 실행되고 새로운 상태로 업데이트된다.
ex. store.dispatch({ type: 'INCREMENT', payload: 1 });

5. 구독(Subscribe)
 : 상태가 변경될 때 실행할 콜백 함수를 등록하는 메서드.
 : 컴포넌트가 상태 변경을 감지하고 UI를 업데이트하는 데 사용

모든 데이터를 App에서부터 작은 컴포넌트로 전송해야 하는 불편함을 보완할 수 있는 Reduce(저장소)

 :  저장소에 전달해야하는 데이터들을 저장하고, App에 useRduce를 연결하면 저장된 데이터를 필요한 컴포넌트에 바로 전달할 수 있다.
 : 컴포넌트에서 reduce에 데이터를 바로 요청할 수 없다. / 단계를 거쳐야 함
Component  ->(useDispatch)  Action  ->(useSelector)  reducer  ->  store

useDispatch : Action을 던짐
행동 지시에 대한 값을 useDispatch 훅을 사용하여 Action 전달

useSelector : 순수 함수 / Action의 값(객체)을 받아서 해당 값을 반환 후 store에 전달
ㄴ 행동 지침과 값을 걸러서 store에 저장
:  

자바스크립트를 쓰는 모든 곳에 사용 가능하므로 react에서 사용할 훅을 따로 다운 받아야 함(두 개 설치)
- npm install redux
- npm install react-redux

store는 컴포넌트가 아니라 데이터를 담아서 쓰는 저장소임.